name: Build Native Libraries

on:
  push:
    branches: [ master ]
    paths:
      - 'zip4j-abi/**'
      - '.github/workflows/build-native-libraries.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'zip4j-abi/**'
      - '.github/workflows/build-native-libraries.yml'
  workflow_dispatch:

jobs:
  build-native:
    # Skip the entire job if commit message contains [skip ci]
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      matrix:
        include:
          # macOS Intel
          - os: macos-13
            arch: x86_64
            target: darwin-x86_64
          # macOS Apple Silicon
          - os: macos-14
            arch: aarch64
            target: darwin-aarch64
          # Linux x86_64 (musl)
          - os: ubuntu-latest
            arch: x86_64
            target: linux-x86_64-musl
            use_musl: true
          # Linux ARM64 (glibc) - self-hosted runner
          - os: self-hosted
            arch: aarch64
            target: linux-aarch64
            runner_labels: [self-hosted, linux, ARM64]
          # Windows x86_64
          - os: windows-latest
            arch: x86_64
            target: windows-x86_64
          # Windows ARM64 - commented out since x86_64 has compatibility
          # - os: windows-11-arm64
          #   arch: aarch64
          #   target: windows-aarch64

    runs-on: ${{ matrix.runner_labels || matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Oracle GraalVM 24
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '21'
        distribution: 'graalvm'
        version: '24.0.0'
        github-token: ${{ secrets.GITHUB_TOKEN }}
        native-image-job-reports: 'true'
        set-java-home: 'true'

    - name: Install development libraries (Linux builds)
      if: matrix.use_musl == true
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools musl-dev zlib1g-dev build-essential
        echo "USE_MUSL=true" >> $GITHUB_ENV

    - name: Install development libraries (ARM64 Linux)
      if: matrix.target == 'linux-aarch64'
      run: |
        sudo apt-get update
        sudo apt-get install -y zlib1g-dev build-essential

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      if: runner.os != 'Windows'
      run: chmod +x ./zip4j-abi/gradlew

    - name: Build native library (macOS)
      if: startsWith(matrix.os, 'macos')
      working-directory: ./zip4j-abi
      run: |
        ./gradlew clean nativeCompile

    - name: Build native library (Linux)
      if: matrix.use_musl == true
      working-directory: ./zip4j-abi
      run: |
        ./gradlew clean nativeCompile

    - name: Build native library (Linux ARM64)
      if: matrix.target == 'linux-aarch64'
      working-directory: ./zip4j-abi
      run: |
        ./gradlew clean nativeCompile

    - name: Build native library (Windows x86_64)
      if: matrix.os == 'windows-latest' && matrix.arch == 'x86_64'
      working-directory: ./zip4j-abi
      run: |
        .\gradlew.bat clean nativeCompile

    # Windows ARM64 build commented out - x86_64 has compatibility
    # - name: Build native library (Windows ARM64)
    #   if: matrix.target == 'windows-aarch64'
    #   working-directory: ./zip4j-abi
    #   run: |
    #     .\gradlew.bat clean nativeCompile

    - name: Create target directory structure
      run: |
        mkdir -p zip4j-abi/build/native/nativeCompile/${{ matrix.target }}

    - name: Copy artifacts (Unix)
      if: runner.os != 'Windows'
      run: |
        # Copy all shared libraries and rename the main one
        if [[ "${{ matrix.target }}" == darwin-* ]]; then
          # macOS: .dylib files
          find ./zip4j-abi -name "*.dylib" | while read file; do
            filename=$(basename "$file")
            cp "$file" "zip4j-abi/build/native/nativeCompile/${{ matrix.target }}/$filename"
            # Also create the expected main library name
            if [[ "$filename" == *"zip4j"* ]] || [[ "$filename" == *"main"* ]]; then
              cp "$file" "zip4j-abi/build/native/nativeCompile/${{ matrix.target }}/libzip4j-abi.dylib"
            fi
          done
        else
          # Linux: .so files
          find ./zip4j-abi -name "*.so" | while read file; do
            filename=$(basename "$file")
            cp "$file" "zip4j-abi/build/native/nativeCompile/${{ matrix.target }}/$filename"
            # Also create the expected main library name
            if [[ "$filename" == *"zip4j"* ]] || [[ "$filename" == *"main"* ]]; then
              cp "$file" "zip4j-abi/build/native/nativeCompile/${{ matrix.target }}/libzip4j-abi.so"
            fi
          done
        fi
        # Copy all header files
        find ./zip4j-abi -name "*.h" | while read file; do
          filename=$(basename "$file")
          cp "$file" "zip4j-abi/build/native/nativeCompile/${{ matrix.target }}/$filename"
          # Also create the expected main header name
          if [[ "$filename" == *"zip4j"* ]] || [[ "$filename" == *"main"* ]]; then
            cp "$file" "zip4j-abi/build/native/nativeCompile/${{ matrix.target }}/zip4j-abi.h"
          fi
        done

    - name: Copy artifacts (Windows)
      if: runner.os == 'Windows'
      run: |
        # Copy all DLL files and rename the main one
        Get-ChildItem -Path "./zip4j-abi" -Recurse -Include "*.dll" | ForEach-Object {
          Copy-Item $_.FullName "zip4j-abi/build/native/nativeCompile/${{ matrix.target }}/$($_.Name)"
          # Also create the expected main library name
          if ($_.Name -like "*zip4j*" -or $_.Name -like "*main*") {
            Copy-Item $_.FullName "zip4j-abi/build/native/nativeCompile/${{ matrix.target }}/zip4j-abi.dll"
          }
        }
        # Copy all LIB files and rename the main one
        Get-ChildItem -Path "./zip4j-abi" -Recurse -Include "*.lib" | ForEach-Object {
          Copy-Item $_.FullName "zip4j-abi/build/native/nativeCompile/${{ matrix.target }}/$($_.Name)"
          # Also create the expected main library name
          if ($_.Name -like "*zip4j*" -or $_.Name -like "*main*") {
            Copy-Item $_.FullName "zip4j-abi/build/native/nativeCompile/${{ matrix.target }}/zip4j-abi.lib"
          }
        }
        # Copy all header files and rename the main one
        Get-ChildItem -Path "./zip4j-abi" -Recurse -Include "*.h" | ForEach-Object {
          Copy-Item $_.FullName "zip4j-abi/build/native/nativeCompile/${{ matrix.target }}/$($_.Name)"
          # Also create the expected main header name
          if ($_.Name -like "*zip4j*" -or $_.Name -like "*main*") {
            Copy-Item $_.FullName "zip4j-abi/build/native/nativeCompile/${{ matrix.target }}/zip4j-abi.h"
          }
        }

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: native-${{ matrix.target }}
        path: zip4j-abi/build/native/nativeCompile/${{ matrix.target }}/
        retention-days: 30

  commit-artifacts:
    needs: build-native
    runs-on: ubuntu-latest
    # Skip the entire job if commit message contains [skip ci]
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Organize artifacts
      run: |
        mkdir -p zip4j-abi/build/native/nativeCompile
        for dir in artifacts/native-*; do
          target=$(basename "$dir" | sed 's/native-//')
          mkdir -p "zip4j-abi/build/native/nativeCompile/$target"
          cp -r "$dir"/* "zip4j-abi/build/native/nativeCompile/$target/"
        done

    - name: Commit and push artifacts
      run: |
        echo "If this job fails then make sure the workflow has write access. In the repository, go to Settings > Actions > General and check 'Read and write permissions'."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add zip4j-abi/build/native/nativeCompile/
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update native libraries for all platforms [skip ci]"
          git push
        fi
